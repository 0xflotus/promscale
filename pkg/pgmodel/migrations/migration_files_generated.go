// Code generated by vfsgen; DO NOT EDIT.

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// SqlFiles statically implements the virtual filesystem provided to vfsgen.
var SqlFiles = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 3, 5, 3, 11, 33, 722310011, time.UTC),
		},
		"/1_base_schema.down.sql": &vfsgen۰CompressedFileInfo{
			name:             "1_base_schema.down.sql",
			modTime:          time.Date(2020, 3, 5, 3, 11, 28, 982000000, time.UTC),
			uncompressedSize: 126,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x88\x2f\x28\xca\xcf\x8d\x4f\x4e\x2c\x49\xcc\xc9\x4f\x57\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xc2\xa7\x38\x33\xaf\x24\xb5\x28\x2f\x31\x87\x90\x6a\x90\x62\xb8\x1a\x40\x00\x00\x00\xff\xff\xdd\x04\x86\x65\x7e\x00\x00\x00"),
		},
		"/1_base_schema.up.sql": &vfsgen۰CompressedFileInfo{
			name:             "1_base_schema.up.sql",
			modTime:          time.Date(2020, 3, 5, 3, 11, 33, 722000000, time.UTC),
			uncompressedSize: 11276,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xdb\x6e\xe3\x46\xd2\xbe\xe7\x53\xd4\x45\x7e\x58\xfc\x23\x0a\x63\x04\xc8\x85\xbd\x13\x40\x91\x69\x9b\x1b\x99\x72\x24\x2a\x33\xd9\x20\x20\x5a\x64\x49\xea\x31\xd5\xe4\xb0\x5b\x23\x6b\x91\x87\x5f\xf4\x81\x67\x4a\xb6\x33\xbb\x48\x74\x31\x63\x92\x7d\xa8\xae\xfa\xaa\xea\xab\x22\x1d\xc7\x9f\x05\xee\xc2\x72\x9c\x60\x4b\x39\x44\x69\x8c\x40\x38\xdf\xef\x90\x83\xd8\x12\x01\x82\xac\x12\x04\x46\xe4\x8d\x88\x30\x48\x59\x72\x84\x15\xc2\xf7\xdf\x41\xb4\x25\x39\x87\x24\x65\x1b\xcb\x9a\xcc\xdd\x71\xe0\xc2\x62\x72\xef\x3e\x8c\x21\xcc\xf2\x74\x17\x46\x44\x90\x24\xdd\x5c\xf7\x3e\xa4\x4c\x60\xce\x48\xd2\x7e\x2a\x1f\x5e\x83\xe3\xc4\x44\x10\xbd\x39\x87\x4d\x0a\x5b\xcc\xd1\xb2\x9c\xfe\x9f\xe5\x38\x10\x28\x39\x63\x5c\x53\x46\x05\x4d\x19\x07\x75\xbf\x7f\x7c\xb1\x67\x30\xfe\x71\xea\x36\xa5\x1d\x71\xcc\x29\x72\x18\x58\x00\x00\x34\x06\x79\x4d\x92\xa1\xba\xdc\xa1\xc8\x69\x14\xd2\x18\x28\x13\xfa\x56\x42\x56\x98\x70\x79\xfd\xdb\xef\xfa\xce\xd2\xf7\x7e\x5e\xba\x03\xfd\xc0\x06\xcf\x9f\x4c\x97\x37\x2e\x0c\x68\x6c\x5b\x76\x79\x5c\xcf\xbf\x71\x3f\x82\xde\x2c\xd4\x63\xe5\xba\x33\xbf\x5f\x9c\xe5\xc2\xf3\xef\xe0\xce\xf3\xa1\x58\xf8\xfa\xec\x29\xd4\xa0\xfe\x43\x3c\xe1\x11\x02\xf7\x63\xa0\xaf\xbe\x90\x64\x8f\x20\xf0\xd9\x9c\xe7\x71\xee\x3d\x8c\xe7\xbf\xc2\x4f\xee\xaf\x4a\xe4\x4a\xfe\x27\x3c\x0e\xf5\x70\xbb\x7e\xd0\xc6\x83\xce\x69\x5f\x94\x31\x7c\xc2\x63\x98\xa5\x5c\x19\xcd\x08\xac\xd5\x5c\x13\xaa\x29\x72\x96\xf2\x4a\xff\x85\x10\x7a\xce\x50\x0e\xad\x49\x91\xa5\xbc\xab\xf4\x8e\x8e\xbb\x82\x9c\x59\xee\xfc\x99\x8c\xe8\xa5\xe2\x17\xee\xdc\x1b\x4f\xeb\x5a\x6d\x20\x49\xfa\x55\xed\x9c\x0a\xef\xfa\xa6\xfc\xa7\xef\x84\xea\x69\x4d\xa4\x6a\x4a\xc3\x2a\xf5\xfb\x75\x3b\xcc\xe6\x30\x77\x1f\xa7\xe3\x89\x0b\xb7\x4b\x7f\x12\x78\xa5\x32\x0a\x87\x1c\xed\xc8\x13\x86\x66\x33\xb5\xca\xc0\x56\x0b\xcf\xdd\x60\x39\xf7\x17\x20\x72\xba\xd9\x60\xae\xee\x8d\x17\xf0\xcd\x7a\xcf\xa2\x6f\xac\x1b\x77\x32\x1d\xcf\x5d\xeb\x47\xf7\xce\xf3\xe5\x33\xf7\xa3\x3b\x59\x06\x2e\xac\xd3\x7c\x47\xc4\xe0\xa2\xa1\x34\xb9\xe3\xe8\xff\xbc\x81\xa0\x3b\x84\xc0\x7b\x70\x17\xc1\xf8\xe1\x31\xf8\x97\xc1\x11\xdc\xcc\x96\x72\xd8\xe3\xdc\x9d\x78\x0b\x6f\xe6\x0f\x0b\x4f\xa1\x31\x78\x7e\x60\x5f\xe8\xb3\xb6\x7f\xbe\xfb\x61\x54\x3b\xf8\xf5\x19\x39\x4a\x28\x18\x51\x60\x50\xee\x30\x04\x29\x56\x4d\xc7\x1a\xdb\x6f\xd8\x53\xab\x4a\x3e\xba\xb6\x5c\xff\xc6\x32\x3a\x9a\x8e\xfd\xbb\xe5\xf8\xce\x85\x2c\xc9\x36\xfc\x73\x52\x83\xd2\xdc\xbb\xbb\x73\xe7\xd0\xd1\x7d\x68\xb4\x0d\x5a\xdd\xb7\x81\x3b\x07\xcf\x5f\xb8\xf3\xa0\x0b\x63\x3d\x4f\x0d\xbc\x9d\xcd\xc1\x1d\x4f\xee\x61\x3e\xfb\xa0\x6e\x14\x5a\x78\x9c\xcf\x26\xee\xcd\x72\xee\xbe\xc2\xea\xd7\x96\xfc\x9d\x88\xa1\x2a\xe8\x7a\x66\x36\xc8\xf3\xbd\x14\x75\x1d\xb9\x16\xcc\x51\xec\x73\x06\xa4\x96\x58\x60\xb5\xa7\x89\x80\x75\x9e\xee\x80\x34\x3c\x83\xb0\x18\x08\xf0\xfd\x7a\x4d\x9f\x47\xa0\xc2\xfc\x16\x8b\xf0\xa0\x46\x50\x0e\x22\xdf\xb3\x88\x08\x8c\x81\xa7\x26\x67\x6d\xd1\x4c\x82\x28\xdd\x27\x31\xac\xa9\x00\xca\x60\xbd\x4f\x92\xd1\x5b\x3c\xa1\x6e\x08\xb9\x5d\x78\xa0\x62\x1b\xea\xa5\x07\x25\x1a\x3a\xbe\x5c\x6c\x2e\x2f\x9a\xbe\x23\xc7\x58\x95\xd3\xc8\x47\x0b\x77\xea\x4e\x02\x18\xf0\xfd\x8a\x8b\x9c\xb2\x4d\xdd\xd1\x25\x6a\xe1\xfb\xef\x9c\x81\xcc\xb5\x61\x82\x6c\x23\xb6\x03\xbd\xba\xfd\xed\xa5\x6d\xc3\x1f\x7f\xc0\x45\x78\x21\xff\x33\x77\xaf\xae\xd4\x1e\x6d\xc4\xf1\xcf\x09\x78\x0f\x0f\x4b\xed\x7e\x8f\xe3\xf9\x78\x3a\x75\xa7\xb0\x18\xdf\xba\xd7\x4d\xbb\x30\x3c\x40\xb9\x35\x29\x63\xb1\xd4\xc1\x48\x5b\x40\xe9\x5c\x26\x25\x91\xc2\x9e\xa3\x52\x77\x7d\x58\xa9\x6a\xf8\x71\x2f\x80\xae\xd5\x00\x39\xb5\x6e\xb8\x38\x45\xce\x2e\x84\x34\xcd\x10\x36\xc8\x30\x27\x02\xb9\xd9\x7f\xcf\xe8\xe7\xbd\x06\x87\xda\xd3\x4f\x05\x16\xa6\xa5\x9a\x87\xc8\x8d\xf7\x99\x5a\x9a\xe1\xb3\x90\x71\x03\xd2\x75\xaf\x47\x68\xd3\x49\xfd\x3c\xcb\xc5\x78\x0a\x54\x00\xdf\x2a\x64\xac\x10\x22\x92\x24\x18\x6b\x62\x43\xd7\x25\x32\xa5\x80\xc0\x52\x01\x47\x14\x80\xcf\x94\x8b\x11\xbc\x01\x3b\x0c\x0f\x61\x07\x3f\xbd\x98\x09\x49\xbe\x31\xb8\x69\xf0\x8b\xd7\x22\x67\x32\x5e\xb8\x50\x2e\xfc\xe1\xde\xf5\xa1\x8e\x96\xd6\x4e\x36\xfc\x43\x72\xb7\xe0\xde\xf5\x1b\xe1\xac\x35\x4c\xc3\xa8\x5a\xd6\x9d\xd6\x37\x91\xbf\x3f\xe7\x2b\x27\xb6\xab\x1d\xfd\xea\x4a\xea\xa2\x31\xc1\xae\xc4\xe8\x09\xa6\x12\xda\xbf\xcc\xa6\xe3\xc0\xeb\x45\xf6\x24\xc7\x1a\xb2\xb4\x6d\x35\xb4\x37\xf4\x0b\xb2\x3a\x28\x47\x05\x0d\xde\x73\xe4\x12\x5d\x3c\xdd\x21\x70\xfc\xbc\x47\x16\x21\x97\xc8\x31\xb0\x29\x58\xb0\xc1\x8e\xe5\x38\x9e\x86\xf9\x49\xec\xbc\x01\x3a\x91\x92\xb8\x19\x8c\xcf\x02\xa7\x89\x14\xe5\xe2\x03\xc3\x51\xdb\x94\xc2\x6e\x61\xe8\x83\x17\xdc\x4b\xc5\x48\xcc\x8d\x17\x50\xed\x63\xc0\x25\x7d\xeb\x0b\x49\x06\xd9\x26\xdc\xa0\x08\x35\x8f\x0c\x0b\x95\x0c\x2e\xfa\xfc\xed\x62\x78\x41\xe3\x0b\xdb\xbe\xba\xa2\x4c\x00\xe1\x40\x63\xb5\xac\x21\x28\x94\xf1\xe6\x56\x26\x9f\x79\x7e\x30\x3b\xc1\xa6\x64\x4e\xae\x1d\xbc\x7e\x2a\xbb\x2b\xb1\x3c\xcc\x88\xc6\xc3\x73\xf8\x1e\x9e\x05\x73\xbf\xf3\x76\x96\x28\xb7\xaa\x84\xb8\x9d\xcf\x1e\xcc\xfd\xf2\x9e\x36\x8c\xe4\xef\x8a\x5b\x94\x0b\x5a\x05\xb4\x8d\xe4\xcd\xa7\x7a\x29\xca\xb8\xa5\x49\xdd\xcc\x87\xf1\x74\x2a\x2f\x1c\x47\x22\x6d\x9d\x26\x49\x7a\xa0\x6c\x03\x1c\x13\x8c\x84\x4c\x85\x0c\x23\xe4\x9c\xe4\x47\x19\x9a\x37\x7b\x92\x13\x26\x10\x81\x40\xae\xa2\xbb\x9e\x7c\xd8\x22\xd3\x71\x94\x72\xc0\x67\x8c\xf6\x32\x77\x46\x29\x8b\xf6\x79\x8e\x4c\x24\xc7\xd3\x32\x59\xc5\x11\x4f\x31\x8f\x0f\xf7\xee\xdc\x6d\x64\xc4\xf7\x1d\xc8\xca\x71\x53\xef\xc1\x0b\xe0\xf2\xad\xce\x0c\x77\x28\x8c\x27\xeb\x0a\x87\xe4\x39\x39\x42\x59\x3f\x68\xc7\xd6\x8f\x9e\xf0\x38\x82\x5b\x79\x83\x1d\x8d\x0c\x43\xb9\xc4\x01\xe1\x40\x98\x66\x09\xc5\x44\x95\xcb\x56\xb2\xf4\x85\x28\xdd\x65\x24\x52\xb8\xcd\x52\xce\x69\x23\xef\xa9\xc0\xa0\xa2\x42\x96\xa3\x10\x47\xd8\x22\xf9\x72\x84\x24\x8d\x9e\x54\x78\x90\x59\x89\x67\x44\xa6\xf1\xe4\xf8\xa6\x7c\x21\xbd\x4b\xe2\x26\x4b\x79\xb8\x4e\x73\x59\x8d\x9c\x63\x18\xb2\x58\x29\x2f\x9b\xfe\x4f\x99\xb0\xba\xbc\x1c\x74\xe1\xa4\xd5\x44\x99\x50\x3c\x55\xb9\x77\xd8\xbd\x5d\xc7\x3e\xf8\xe3\x07\xf7\xba\xe2\xf5\xe0\x38\xf2\x94\x71\xba\x97\x0f\xa3\x2d\x46\x4f\xea\xfc\x12\x89\xaa\x4a\xd7\x63\xd6\x94\x0b\x48\x33\x41\x77\x94\x0b\x1a\xe9\x81\x57\xb5\xbc\x55\x1e\x2e\x4b\xb9\x55\xb8\x8e\xd5\x74\xc8\xd3\x05\x9a\x05\x05\xd8\x5a\x4a\x6a\xe2\xad\x7c\x38\xf6\x6f\x54\x49\xfb\xbe\xd2\x9c\xa5\x63\x4f\x30\x2b\xf5\x72\x6d\xe9\x7b\xb7\x70\x3b\x5b\xfa\x37\xcd\x24\x69\x38\x7d\x35\xd6\xe4\x23\xf0\x6e\xf5\xdf\xf5\x9c\xdc\x72\x19\xed\x33\xd2\xc4\x69\x1e\xf6\x84\xf7\x4e\x7c\xb1\x2b\xe1\xea\xe3\xae\x8d\x72\xa5\xbe\x25\x40\x25\xdc\xc7\x53\x59\x13\x68\x5e\xb7\xc2\x88\x48\xe3\x1c\x10\x48\xae\x78\x18\xae\xd7\x32\x36\x44\x5b\xc2\x36\xd2\x42\x8a\x1a\x47\x5b\xdc\x91\xba\xb1\x48\xc2\x53\x55\x7b\x70\xe0\xfb\x1c\x4b\x56\x55\x41\x63\x85\x49\x7a\x00\xd5\x21\xca\x73\x15\x6d\x18\x08\xcc\x77\x5c\x92\xae\x32\x76\x44\xc7\x46\xb1\x51\x94\x5c\xd3\xd9\xe4\xa7\x66\xe1\x07\x9e\x0f\x8b\xfb\xf1\xdc\x85\xe5\xe3\x8d\xf4\x10\xf7\xe3\x64\xba\x5c\x78\xbf\xb8\xf0\x30\xbb\x71\x2f\x86\x8d\x63\xdb\xc5\xb9\x39\x46\x29\x8b\x0d\xe8\xc8\x5a\x60\xae\xa0\xf7\x77\x42\x55\x0b\x50\x25\x30\xbe\x1e\x54\x95\x48\xe4\x59\x75\x22\xe0\x5b\xb8\xfc\x9f\x9d\x51\x1f\xa4\x01\x82\xe6\x69\x9a\xf8\xf0\x16\xe0\x2f\xa7\xd3\xe6\xe9\x9a\x43\xae\xde\xc3\xe5\x35\x38\x0e\x5c\x3a\x94\xc5\xf8\x8c\xb1\x8e\xde\xbc\xff\xd0\xa7\x59\xc1\x89\x33\xc9\xdf\x2f\xe3\xe9\xd2\x5d\x34\x7a\x25\x55\xac\x1c\x36\x05\xd2\x3e\x36\xf3\x61\x32\xf3\x6f\xa7\x5e\x4d\xc1\x37\x33\xf0\x67\xc1\xbd\xe7\xdf\x59\x8d\xfc\x5d\x07\xd7\x39\x43\xfb\xb3\xa0\xd7\xd8\x63\x6f\xe1\xc2\xc5\x44\x31\x48\xc9\x0e\xd7\x54\xd5\xb7\x32\x9b\x15\x0b\x5d\x74\x21\xd0\xc1\xc8\xab\x3a\x0a\x6f\x48\x39\x5a\x9f\x34\x1e\x34\x92\x8a\x69\xc5\xd4\xb3\x4c\x91\x61\x3c\x3f\x50\x9d\x9f\x1a\x85\x3c\x4b\xea\x7a\xa8\x56\xc3\x96\xf5\x0e\x62\xdb\x94\x8d\xb9\xa5\x84\xc3\x4a\xb6\x6a\x46\xcd\x94\x6d\x13\x42\x8b\x86\x69\x3e\x5a\x8f\xd8\x34\x2e\x09\x17\x14\x7d\x34\x4d\xb9\xc0\x04\x1f\x45\x99\x0c\xd7\xaa\x88\x16\x65\x10\x11\x8e\x8d\x30\x28\xcc\x0c\xca\x38\xe6\x02\x0e\x32\xd2\xaa\x98\x6a\x6e\x94\xe5\x41\x6e\x8a\x6e\x56\x88\xe4\x38\x9c\xb2\x08\x4f\x1c\xa5\x33\x91\xae\x0b\xe1\xa8\xc0\x1d\x90\x24\x47\x12\x1f\x75\xc5\xc1\xeb\xa7\x2b\x95\x60\xf6\xe9\xe1\x70\xca\x12\x55\x70\xa8\xa6\x3c\xe1\xb1\x1e\xe0\x64\xcc\x2b\x9f\xe9\x6e\xdd\xfb\x1a\x54\xd4\xa3\x92\xdd\xd5\x10\xba\xf8\x79\xaa\x28\xdc\x21\x27\x59\x86\x39\x90\x3c\xdd\xb3\x18\x3e\xf1\x94\xad\x42\x24\xd1\x36\x94\x20\x53\xc4\x95\x7e\x91\x9c\x75\x85\x42\x06\xf8\x3c\x3d\x84\xc8\x05\xdd\x11\x81\x96\xe3\xc8\x94\x67\x7a\xee\x83\xcb\x77\x4a\x19\x97\xef\xde\xd9\x6f\x80\xbd\x86\x7b\x6b\xdf\xc1\x27\xae\x45\x19\x02\xcc\x96\x81\x3a\xb4\xf6\x02\x79\x55\x35\xc9\x6d\xab\xe4\x59\x0b\x37\x98\xdd\x42\x8e\x51\x9a\xc7\x16\x94\xe7\x2c\xf6\xb1\x4e\xf5\x5b\x60\x11\xcc\xa5\x5d\xe7\xb3\x0f\x0b\xb8\x7c\x57\x72\x35\xe9\xdc\xdf\xb4\xc4\xaa\x1e\xf4\xe9\x6e\xcf\x18\xf2\x4a\x65\x95\xc2\xa0\x50\xd8\xd7\xe9\x48\xaf\xaf\x5f\x38\x84\x9a\x69\x13\x76\x54\x7f\x74\xf4\x40\xd8\x11\x13\xdc\x29\xf0\xff\x97\x74\xa1\x36\x32\x42\x34\x14\x71\xb2\xc3\x78\xe6\xd7\x37\x07\x1e\xf7\xab\x84\x46\x30\x7e\xf4\x38\xbc\x72\xce\x8b\xfb\x58\xd5\xba\x85\xcc\xca\x42\xa8\x2b\x0e\xe5\x43\x69\xbd\x59\xd0\x6d\x46\x94\xe5\xc6\x81\x26\x09\x68\xbe\xd8\xd3\x65\x5b\x03\x15\x6f\x6d\x35\xbc\xc4\x41\xdf\xda\x67\x80\x57\x36\x1a\x7a\xcb\xc9\x5a\x93\xe9\x6b\x8b\xca\x4e\x91\x6c\x36\xfc\xff\xf6\xea\x67\xbb\x2c\xed\x5e\xd9\x57\x54\xaa\xd9\x69\x08\x9c\xaf\x59\x5f\xb2\x5e\x83\xfd\xfc\xc9\x12\x51\x26\x70\xab\xca\xe0\x8e\xa3\xfa\x59\xa6\x17\xc0\x35\xd4\xd2\x1c\x01\x9f\x33\x64\x5c\xc6\x96\xc7\xe9\xe3\xdd\xe2\xe7\x69\x75\x1e\xd3\xd6\xd5\x62\x17\xcd\x5c\x85\xbf\x5e\xce\xfa\x17\xd1\xf1\xbe\x4c\xde\x4e\x89\xaf\x28\xc4\x7b\xe9\xa4\xfd\x62\xaa\xbb\x33\x06\x2f\x08\x96\x31\x75\xc5\x76\x20\x23\x34\x7f\x9d\xc1\x69\x3c\xa8\x67\xe4\xb3\x3c\xed\xac\xa9\xd7\x34\xe7\xa2\xe0\x31\x22\x85\x2c\xc7\x2f\xc8\x44\xd9\xe6\xd4\xef\x61\x56\x28\xab\xc5\x3d\xc7\x18\xf6\x59\x51\xf6\xb3\x82\xf6\x50\xdd\x23\xfa\x8b\xd8\x45\xc3\xcf\x5f\x6b\xce\x0e\xc9\xad\xeb\xed\x65\x53\xaa\x70\x5c\x7f\x4d\x51\x55\xc6\x84\x17\x95\x8c\x56\x9d\xb4\xb8\x4a\xe3\x96\xe3\xbc\xe3\x90\x63\x96\x23\x97\x1a\x7e\xc2\xa3\xf9\xa8\x42\x16\xe7\x32\x66\x73\x14\x30\x38\x20\xc4\xa9\xf4\x1e\x59\xb9\xab\x22\xca\x2a\x68\x20\x65\x42\x2f\x5c\x46\x79\xbe\xcf\xb2\x34\x17\x40\x85\x5d\x76\xab\x69\xf9\x08\x73\xc8\x30\x57\x65\xb7\x9c\x1e\xe5\x54\xd0\x88\x24\xa0\x57\x93\x04\xd6\x72\x1c\xca\x75\xfb\x5a\x19\x57\x46\xa6\x8a\x98\x46\x09\x95\x82\x12\x16\xab\x52\x9f\x44\x5b\x8c\xe5\xf3\x1c\xcf\xf7\xb2\x34\x6b\x11\x69\x58\xa3\x0a\x25\xa3\x6a\xd4\x0d\xbf\xfd\xde\xa9\x1c\xe2\xe7\xf0\x0b\x49\x7a\xbb\xcf\x0d\xf2\xef\x38\x5a\xee\x88\x24\x89\x12\xba\x7a\xe9\x28\xd2\x22\x4b\xca\x5a\x4a\x42\xaa\x6a\xec\xb5\xd7\x90\x87\xd3\x51\x8b\xc6\xdc\x84\xb1\xa3\xb1\x80\x8e\x5f\x03\xe9\xa6\x75\x3d\xe6\x48\x78\xca\xb8\xdd\x58\x2a\x4a\x49\x82\x3c\xc2\x41\xf2\x94\x8d\xb2\x94\xb7\xdf\x0e\x77\x63\xf5\x27\xee\xfc\xf0\xc3\x45\xa8\xd3\x4b\x78\x31\x04\x1c\x3d\xe1\xd1\xb6\xa5\x0a\x5a\xfd\xe8\x6a\xf1\x91\x4c\x99\x27\x97\xa6\xf1\x40\x2d\x22\xd7\xd2\xf5\x93\xad\xde\x84\x95\x13\xfa\x32\xdf\x29\x02\x6c\x03\x36\x37\x9a\xba\xb7\x01\xfc\x73\xe6\xf5\x7e\x2f\x01\x49\x4b\x2a\x59\xb4\x0c\x92\x91\x76\x68\x25\x95\xf2\xe6\x64\x54\xb8\x71\x21\xa2\xf5\xea\x3d\x9a\x1f\x87\x24\x4f\x59\xcf\x96\xed\x5b\xdd\x77\x4d\x20\x67\x8e\xca\xcc\xd1\x32\x43\x33\xe4\x34\xe7\xd4\xce\xd2\x1e\x61\x77\x4b\xc8\xf1\x7c\x3e\xfe\xb5\x83\xe1\xd2\x94\x06\xe8\x52\x09\x43\x78\x67\xb7\x6c\x64\x35\x0d\xac\x03\x4d\xa8\xbf\x49\xe8\x3b\x12\xc0\x65\x07\x17\x46\x01\x66\xe3\x1d\x79\x96\x7b\xda\xa6\xae\xd5\xbb\x37\x95\x6f\xc3\x06\x4e\x58\xa3\x70\x4b\x69\xd4\x42\x72\x1a\x3f\xc3\x7b\xd8\x14\x47\x6f\xc5\xc9\x73\x6c\x48\xbf\x5d\xe6\x55\x6c\x34\xa9\xd0\x7c\xdd\xa4\x3e\xdb\xc2\x18\x56\xc7\x82\x09\xe9\x18\x62\x39\x4e\xeb\xd5\x6f\xc9\x3f\xaa\xf7\xb7\xba\xc9\xfc\x6f\xd4\xe9\xb5\xee\xb7\xe7\x42\x56\x6d\x17\x19\xb8\x94\x50\x83\xfa\xc7\x5c\x55\xd8\xd2\x02\x57\x61\xab\x45\x6d\xb4\x23\xa5\xab\x4f\x18\x89\x81\x5e\x90\x6c\x36\xda\x13\xec\x21\xd4\xef\x18\x17\x6d\x33\xa1\x17\x8b\x2f\x6e\x97\x1c\xc2\x4c\xf1\x7c\xdf\x9d\x9f\xf1\x4d\xe3\x8c\x34\x86\xf7\xe5\x54\x1b\x3a\x26\x5b\x9c\xfa\x1e\xe0\x26\x55\x39\x45\xc5\xda\x15\xae\x25\x19\x54\x5d\x57\xdd\x43\x2e\xbe\xb1\x30\xd6\xeb\x94\x20\x6f\x7f\xd9\xd9\x06\x7a\xcf\x97\x76\x50\x7c\x6d\x67\x4a\x51\x63\x25\x38\xf9\xea\x03\x5e\xd5\x9c\xea\xfb\xdc\x6e\x50\x6e\x3f\x34\xcd\x86\xce\x6b\xc6\xf6\x08\x03\xd8\x62\x54\xbb\xd9\xd4\x7c\xcf\xf7\x77\x79\xb7\x77\xa2\xf2\xd2\x4a\xa8\x2a\x2f\xe3\x16\xef\x1b\xea\xff\xd3\xb5\x51\x17\x1b\x4d\xbe\x5b\x7e\x87\xa5\xe8\xb7\x6e\x10\x6a\x54\x77\xe9\x44\xe5\x95\xca\xd0\x93\xc0\x6d\x18\xda\x1c\xb4\x97\x9e\xa8\xbf\xed\xae\x6d\xde\xaa\x93\x41\x59\x69\xaa\x59\x91\xd0\x09\xae\xaf\x18\x3d\x0b\xfd\xc1\x4b\xa5\xb9\xda\xb1\x91\xba\x6c\x5b\xb1\x83\x1e\x09\xec\xa6\x79\x5e\x17\xa8\xff\x13\x00\x00\xff\xff\x4c\x50\xfb\x8c\x0c\x2c\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/1_base_schema.down.sql"].(os.FileInfo),
		fs["/1_base_schema.up.sql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
