// Code generated by vfsgen; DO NOT EDIT.

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// SqlFiles statically implements the virtual filesystem provided to vfsgen.
var SqlFiles = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 3, 18, 14, 4, 29, 685923195, time.UTC),
		},
		"/1_base_schema.down.sql": &vfsgen۰CompressedFileInfo{
			name:             "1_base_schema.down.sql",
			modTime:          time.Date(2020, 3, 5, 15, 23, 34, 201239935, time.UTC),
			uncompressedSize: 126,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x76\xf6\x70\xf5\x75\x54\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x88\x2f\x28\xca\xcf\x8d\x4f\x4e\x2c\x49\xcc\xc9\x4f\x57\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\xc2\xa7\x38\x33\xaf\x24\xb5\x28\x2f\x31\x87\x90\x6a\x90\x62\xb8\x1a\x40\x00\x00\x00\xff\xff\xdd\x04\x86\x65\x7e\x00\x00\x00"),
		},
		"/1_base_schema.up.sql": &vfsgen۰CompressedFileInfo{
			name:             "1_base_schema.up.sql",
			modTime:          time.Date(2020, 3, 18, 14, 8, 42, 156577466, time.UTC),
			uncompressedSize: 11372,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x5b\x6f\xe3\xc6\x92\x7e\xe7\xaf\xa8\x87\x2c\x2c\x6e\x44\x61\x8c\x00\x79\xb0\x77\x02\x68\x64\xda\xe6\x46\xa6\x1c\x89\xca\x4c\x36\x08\x88\x16\x59\x92\x7a\x4c\x35\x39\xec\xd6\xc8\x5a\xe4\xc7\x1f\xf4\x85\x77\x4a\xb6\x27\xe7\x20\xf1\x43\x32\x22\xd9\xdd\x75\xf9\xaa\xea\xab\x22\x1d\xc7\x9f\x05\xee\xc2\x72\x9c\x60\x4b\x39\x44\x69\x8c\x40\x38\xdf\xef\x90\x83\xd8\x12\x01\x82\xac\x12\x04\x46\xe4\x85\x88\x30\x48\x59\x72\x84\x15\xc2\x8f\x3f\x40\xb4\x25\x39\x87\x24\x65\x1b\xcb\x9a\xcc\xdd\x71\xe0\xc2\x62\x72\xef\x3e\x8c\x21\xcc\xf2\x74\x17\x46\x44\x90\x24\xdd\x5c\xf7\xde\xa4\x4c\x60\xce\x48\xd2\xbe\x2b\x6f\x5e\x83\xe3\xc4\x44\x10\x7d\x38\x87\x4d\x0a\x5b\xcc\xd1\xb2\x9c\xfe\x3f\xcb\x71\x20\x50\x72\xc6\xb8\xa6\x8c\x0a\x9a\x32\x0e\xea\x7a\xff\xf3\xc5\x99\xc1\xf8\xc3\xd4\x6d\x4a\x3b\xe2\x98\x53\xe4\x30\xb0\x00\x00\x68\x0c\x2b\xba\x91\x97\x48\x32\x54\x57\x76\x28\x72\x1a\x85\x34\x06\xca\x84\xbe\x94\x90\x15\x26\x5c\xfe\xfe\xfd\x0f\x7d\x65\xe9\x7b\xbf\x2c\xdd\x81\xbe\x61\x83\xe7\x4f\xa6\xcb\x1b\x17\x06\x34\xb6\x2d\xbb\xd4\xd8\xf3\x6f\xdc\x4f\xa0\xcf\x0b\xf5\xb3\x72\xdf\x99\xdf\x2f\xd1\x72\xe1\xf9\x77\x70\xe7\xf9\x50\x6c\x7c\x7d\x56\x11\xf5\x50\xa5\x47\x5d\x89\x27\x3c\x42\xe0\x7e\x0a\xf4\xaf\xaf\x24\xd9\x23\x08\x7c\x36\xfa\x3c\xce\xbd\x87\xf1\xfc\x37\xf8\xd9\xfd\x4d\x89\x5c\xc9\xff\x84\xc7\xa1\x7e\xdc\xae\x2b\xda\xb8\xd1\xd1\xf6\x45\x19\xc3\x27\x3c\x86\x59\xca\x95\xdf\x8c\xc0\xda\xcc\x35\xa1\x9a\x22\x67\x29\xaf\xec\x5f\x08\xa1\xd7\x0c\xe5\xa3\x35\x29\xb2\x94\x77\x8d\xde\xb1\x71\x57\x90\x33\xdb\x9d\xd7\xc9\x88\x5e\x1a\x7e\xe1\xce\xbd\xf1\xb4\x6e\xd5\x06\x92\x64\x68\xd5\xf4\x54\x90\xd7\x17\xe5\x7f\xfa\x34\x54\x77\x6b\x22\x55\x4b\x1a\x5e\xa9\x5f\xaf\xfb\x61\x36\x87\xb9\xfb\x38\x1d\x4f\x5c\xb8\x5d\xfa\x93\xc0\x2b\x8d\x51\xc4\xe4\x68\x47\x9e\x30\x34\x87\xa9\x5d\x06\xb6\xda\x78\xee\x06\xcb\xb9\xbf\x00\x91\xd3\xcd\x06\x73\x75\x6d\xbc\x80\xef\xd6\x7b\x16\x7d\x67\xdd\xb8\x93\xe9\x78\xee\x5a\x1f\xdc\x3b\xcf\x97\xf7\xdc\x4f\xee\x64\x19\xb8\xb0\x4e\xf3\x1d\x11\x83\x8b\x86\xd1\xe4\x89\xa3\xff\xf2\x06\x82\xee\x10\x02\xef\xc1\x5d\x04\xe3\x87\xc7\xe0\xff\x0c\x8e\xe0\x66\xb6\x94\x8f\x3d\xce\xdd\x89\xb7\xf0\x66\xfe\xb0\x88\x14\x1a\x83\xe7\x07\xf6\x85\xd6\xb5\xfd\xe7\xbb\x1f\x47\x35\xc5\xaf\xcf\xc8\x51\x42\xc1\x88\x02\x83\xf2\x84\x21\x48\xb1\x6a\x36\xd6\xd8\x7e\xc3\x99\xda\x54\xf2\xd6\xb5\xe5\xfa\x37\x96\xb1\xd1\x74\xec\xdf\x2d\xc7\x77\x2e\x64\x49\xb6\xe1\x5f\x92\x1a\x94\xe6\xde\xdd\x9d\x3b\x87\x8e\xed\x43\x63\x6d\xd0\xe6\xbe\x0d\xdc\x39\x78\xfe\xc2\x9d\x07\x5d\x18\xeb\x75\xea\xc1\xdb\xd9\x1c\xdc\xf1\xe4\x1e\xe6\xb3\x8f\xea\x42\x61\x85\xc7\xf9\x6c\xe2\xde\x2c\xe7\xee\x2b\xbc\x7e\x6d\xc9\xbf\x13\x69\x54\xe5\x5d\xcf\xac\x06\xa9\xdf\x4b\x89\xd7\x91\x7b\xc1\x1c\xc5\x3e\x67\x40\x6a\xb5\x05\x56\x7b\x9a\x08\x58\xe7\xe9\x0e\x48\x23\x32\x08\x8b\x81\x00\xdf\xaf\xd7\xf4\x79\x04\x2a\xd3\x6f\xb1\x48\x0f\xea\x09\xca\x41\xe4\x7b\x16\x11\x81\x31\xf0\xd4\x94\xad\x2d\x9a\x45\x10\xa5\xfb\x24\x86\x35\x15\x40\x19\xac\xf7\x49\x32\x7a\x4b\x24\xd4\x1d\x21\x8f\x0b\x0f\x54\x6c\x43\xbd\xf5\xa0\x44\x43\x27\x96\x8b\xc3\xe5\x8f\x66\xec\xc8\x67\xac\x2a\x68\xe4\xad\x85\x3b\x75\x27\x01\x0c\xf8\x7e\xc5\x45\x4e\xd9\xa6\x1e\xe8\x12\xb5\xf0\xe3\x0f\xce\x40\x96\xdb\x30\x41\xb6\x11\xdb\x81\xde\xdd\xfe\xfe\xd2\xb6\xe1\xcf\x3f\xe1\x22\xbc\x90\xff\x33\x57\xaf\xae\xd4\x19\x6d\xc4\xf1\x2f\x09\x78\x0f\x0f\x4b\x1d\x7e\x8f\xe3\xf9\x78\x3a\x75\xa7\xb0\x18\xdf\xba\xd7\x4d\xbf\x30\x3c\x40\x79\x34\x29\x73\xb1\xb4\xc1\x48\x7b\x40\xd9\x5c\x16\x25\x91\xc2\x9e\xa3\x32\x77\xfd\xb1\xd2\xd4\xf0\x61\x2f\x80\xae\xd5\x03\x72\x69\xdd\x71\x71\x8a\x9c\x5d\x08\xe9\x9a\x21\x6c\x90\x61\x4e\x04\x72\x73\xfe\x9e\xd1\x2f\x7b\x0d\x0e\x75\xa6\x9f\x0a\x2c\x5c\x4b\x35\x15\x91\x07\xef\x33\xb5\x35\xc3\x67\x21\xf3\x06\xa4\xeb\xde\x88\xd0\xae\x93\xf6\x79\x96\x9b\xf1\x14\xa8\x00\xbe\x55\xc8\x58\x21\x44\x24\x49\x30\xd6\xdc\x86\xae\x4b\x64\x4a\x01\x81\xa5\x02\x8e\x28\x00\x9f\x29\x17\x23\x78\x03\x76\x18\x1e\xc2\x0e\x7e\x7a\x31\x13\x92\x7c\x63\x70\xd3\xe0\x17\xaf\x45\xce\x64\xbc\x70\xa1\xdc\xf8\xe3\xbd\xeb\x43\x1d\x2d\xad\x93\x6c\xf8\x1f\x49\xdf\x82\x7b\xd7\x6f\xa4\xb3\xd6\x63\x1a\x46\xd5\xb6\xee\xb4\x7e\x88\xfc\xfb\xb6\x58\x39\x71\x5c\x4d\xf5\xab\x2b\x69\x8b\xc6\x02\xbb\x12\xa3\x27\x99\x4a\x68\xff\x3a\x9b\x8e\x03\xaf\x17\xd9\x93\x1c\x6b\xc8\xd2\xbe\xd5\xd0\xde\xd0\xaf\xc8\xea\xa0\x1c\x15\x4c\x78\xcf\x91\x4b\x74\xf1\x74\x87\xc0\xf1\xcb\x1e\x59\x84\x5c\x22\xc7\xc0\xa6\x20\xc2\x06\x3b\x96\xe3\x78\x1a\xe6\x27\xb1\xf3\x06\xe8\x44\x4a\xe2\x66\x32\x3e\x0b\x9c\x26\x52\x54\x88\x0f\x0c\x47\x6d\x53\x0a\xbb\x85\xa1\x8f\x5e\x70\x2f\x0d\x23\x31\x37\x5e\x40\x75\x8e\x01\x97\x8c\xad\xaf\x24\x19\x64\x9b\x70\x83\x22\xd4\x3c\x32\x2c\x4c\x32\xb8\xe8\x8b\xb7\x8b\xe1\x05\x8d\x2f\x6c\xfb\xea\x8a\x32\x01\x84\x03\x8d\xd5\xb6\x86\xa0\x50\xc6\x9b\x47\x99\x7a\xe6\xf9\xc1\xec\x04\x9b\x92\x35\xb9\xa6\x78\x5d\x2b\xbb\x2b\xb1\x54\x66\x44\xe3\xe1\x39\x7c\x0f\xcf\x82\xb9\x3f\x78\x3b\x5b\x94\x47\x55\x42\xdc\xce\x67\x0f\xe6\x7a\x79\x6d\xe6\xc3\x64\xe6\xdf\x4e\xbd\x49\x00\x37\x33\xf0\x67\xc1\xbd\xe7\xdf\x95\xb7\xb5\xdf\x24\xbd\x57\xd4\xa3\x3c\xcf\x2a\x90\x6f\x14\x6b\xde\xd5\x27\x51\xc6\x2d\xcd\xf9\x66\x3e\x8c\xa7\x53\xf9\xc3\x71\x24\x10\xd7\x69\x92\xa4\x07\xca\x36\xc0\x31\xc1\x48\xc8\x4a\xc9\x30\x42\xce\x49\x7e\x94\x99\x7b\xb3\x27\x39\x61\x02\x11\x08\xe4\x2a\xf9\xeb\xc5\x87\x2d\x32\x9d\x66\x29\x07\x7c\xc6\x68\x2f\x4b\x6b\x94\xb2\x68\x9f\xe7\xc8\x44\x72\x3c\x2d\x93\x55\x58\xe0\x14\x31\xf9\x78\xef\xce\xdd\x46\xc1\x7c\xdf\x41\xb4\x7c\x6e\xea\x3d\x78\x01\x5c\xbe\x35\xd6\xe1\x0e\x85\x09\x74\xdd\x00\x91\x3c\x27\x47\x28\xdb\x0b\x1d\xf7\xfa\xd6\x13\x1e\x47\x70\x2b\x2f\xb0\xa3\x91\x61\x28\xb7\x38\x20\x1c\x08\xd3\x24\xa2\x58\xa8\x4a\xdd\x4a\x36\xc7\x10\xa5\xbb\x8c\x44\x0a\xd6\x59\xca\x39\x6d\x94\x45\x95\x37\x54\xd2\xc8\x72\x14\xe2\x08\x5b\x24\x5f\x8f\x90\xa4\xd1\x93\xca\x1e\xb2\x68\xf1\x8c\xc8\x2a\x9f\x1c\xdf\x54\x4e\x64\xf0\x49\x58\x65\x29\x0f\xd7\x69\x2e\x9b\x95\x73\x04\x44\xf6\x32\xe5\xcf\x66\x7a\xa0\x4c\x58\x5d\xda\x0e\xba\xaf\xd2\x66\xa2\x4c\x28\x1a\xab\xa2\x3f\xec\x5e\xae\x87\x06\xf8\xe3\x07\xf7\xba\xa2\xfd\xe0\x38\x52\xcb\x38\xdd\xcb\x9b\xd1\x16\xa3\x27\xa5\xbf\x44\xa2\xea\xe3\xf5\x33\x6b\xca\x05\xa4\x99\xa0\x3b\xca\x05\x8d\xf4\x83\x57\xb5\xb2\x56\x2a\x97\xa5\xdc\x2a\x22\xcb\x6a\xc6\xeb\xe9\xfe\x4d\xe7\x36\x09\xb6\x96\x91\x9a\x78\x2b\x6f\x8e\xfd\x1b\xd5\xf1\xbe\xaf\x2c\x67\xe9\xd4\x14\xcc\x4a\xbb\x5c\x5b\xfa\xda\x2d\xdc\xce\x96\xfe\x4d\xb3\x86\x1a\xca\x5f\x3d\x6b\xca\x15\x78\xb7\xfa\xdf\xf5\x92\xdd\x0a\x19\x1d\x33\xd2\xc5\x69\x1e\xf6\x64\xff\x4e\xfa\xb1\x2b\xe1\xea\xcf\x5d\x1b\xe3\x4a\x7b\x4b\x80\x4a\xb8\x8f\xa7\xb2\x65\xd0\xb4\x6f\x85\x11\x91\xce\x39\x20\x90\x5c\xd1\x34\x5c\xaf\x65\x6e\x88\xb6\x84\x6d\xa4\x87\x14\x73\x8e\xb6\xb8\x23\x75\x67\x91\x84\xa7\xaa\x35\xe1\xc0\xf7\x39\x96\xa4\xab\x82\xc6\x0a\x93\xf4\x00\x6a\x86\x94\xe7\x2a\xdb\x30\x10\x98\xef\xb8\xe4\x64\x65\xee\x88\x8e\x8d\x5e\xa4\xe8\xc8\xa6\xb3\xc9\xcf\xcd\xbe\x10\x3c\x1f\x16\xf7\xe3\xb9\x0b\xcb\xc7\x1b\x19\x21\xee\xa7\xc9\x74\xb9\xf0\x7e\x75\xe1\x61\x76\xe3\x5e\x0c\x1b\x6a\xdb\x85\xde\x1c\xa3\x94\xc5\x06\x74\x64\x2d\x30\x57\xd0\xfb\x27\xa1\xaa\x05\xa8\x12\x18\x7f\x1d\x54\x95\x48\xe4\x59\x0d\x2a\xe0\x7b\xb8\xfc\x8f\xe9\xa8\x15\x69\x80\xa0\xa9\x4d\x13\x1f\xde\x02\xfc\xe5\x74\xda\xd4\xae\xf9\xc8\xd5\x7b\xb8\xbc\x06\xc7\x81\x4b\x87\xb2\x18\x9f\x31\xd6\xd9\x9b\xf7\x2b\x7d\x9a\x34\x9c\xd0\x49\xfe\xfd\x3a\x9e\x2e\xdd\x45\x63\x94\x52\xe5\xca\x61\x53\x20\x1d\x63\xb5\xda\x5d\xee\xd2\xaa\xe1\x65\xfd\xae\x83\xeb\x9c\xa3\xfd\x59\xd0\xeb\xec\xb1\xb7\x70\xe1\x62\xa2\x08\xa6\x24\x8f\x6b\xaa\xda\x5f\x59\xcd\x8a\x8d\x2e\xba\x10\xe8\x60\xe4\x55\x03\x87\x37\x94\x1c\x6d\x4f\x1a\x0f\x1a\x45\xc5\x4c\x6a\xea\x55\xa6\xa8\x30\x9e\x1f\xa8\xc1\x50\x8d\x61\x9e\xe5\x7c\x3d\x4c\xac\xe1\xcb\xfa\x80\xb1\xed\xca\xc6\xda\x52\xc2\x61\x25\x9b\xfd\x2d\x34\x4c\xd3\xd5\x7a\xc6\xa6\x71\x49\xb8\xa0\x18\xb3\x69\xca\x05\x26\xf9\x28\xca\x64\xb8\x56\x45\xb4\x28\x83\x88\x70\x6c\xa4\x41\x61\x56\x50\xc6\x31\x17\x70\x90\x99\x56\xe5\x54\x73\xa1\xec\x1e\x72\xd3\x93\xb3\x42\x24\xc7\xe1\x94\x45\x78\x42\x95\xce\x42\xba\x2e\x84\xa3\x02\x77\x40\x92\x1c\x49\x7c\xd4\x0d\x09\xaf\x6b\x57\x1a\xc1\x9c\xd3\xc3\xe1\x94\x27\xaa\xe4\x50\x2d\x79\xc2\x63\x3d\xc1\xc9\x9c\x57\xde\xd3\xc3\xbc\xf7\x35\xa8\xa8\x5b\x25\xbb\xab\x21\x74\xf1\xcb\x54\x51\xb8\x43\x4e\xb2\x0c\x73\x20\x79\xba\x67\x31\x7c\xe6\x29\x5b\x85\x48\xa2\x6d\x28\x41\xa6\x88\x2b\xfd\x2a\x39\xeb\x0a\x85\x4c\xf0\x79\x7a\x08\x91\x0b\xba\x23\x02\x2d\xc7\x91\x25\xcf\x8c\xe4\x07\x97\xef\x94\x31\x2e\xdf\xbd\xb3\xdf\x00\x7b\x0d\xf7\xd6\xb9\x83\xcf\x5c\x8b\x32\x04\x98\x2d\x03\xa5\xb4\x8e\x02\xf9\xab\x9a\xa1\xdb\x56\xc9\xb3\x16\x6e\x30\xbb\x85\x1c\xa3\x34\x8f\x2d\x28\xf5\x2c\xce\xb1\x4e\x8d\x63\x60\x11\xcc\xa5\x5f\xe7\xb3\x8f\x0b\xb8\x7c\x57\x72\x35\x19\xdc\xdf\xb5\xc4\xaa\x6e\xf4\xd9\x6e\xcf\x18\xf2\xca\x64\x95\xc1\xa0\x30\xd8\x5f\xb3\x91\xde\x5f\xbf\x8f\x08\x35\xd3\x26\xec\xa8\xfe\xd1\xb1\x03\x61\x47\x4c\x70\xa7\xc0\xff\x6f\xb2\x85\x3a\xc8\x08\xd1\x30\xc4\xc9\x01\xe4\x99\xbf\xbe\x35\xf0\xb8\x5f\x25\x34\x82\xf1\xa3\xc7\xe1\x95\x6b\x5e\x3c\xc7\xaa\xf6\x2d\x64\x56\x1e\x42\xdd\x71\xa8\x18\x4a\xeb\xb3\x84\xee\xac\xa2\x6c\x37\x0e\x34\x49\x40\xf3\xc5\x9e\x21\xdc\x1a\xa8\x78\xeb\x24\xe2\x25\x0e\x7a\xb2\xe5\xe8\x19\x41\xc0\x2b\x67\x10\xbd\xad\x64\x6d\xfe\x74\xb2\xa1\x84\x5d\xad\xa5\x1c\x35\x9b\xca\x17\x14\x19\xb5\xe8\x5a\xa3\x81\x36\x02\xfd\x77\xfb\xf4\xb3\x03\x9a\x37\x1c\x68\xff\x85\x0e\x37\x3b\x0d\x9d\xf3\xbd\xee\x4b\x5e\x6f\xb0\xa6\x6f\x6c\x2d\x65\xe1\xb7\xaa\xca\xef\x38\x6a\x4c\x66\x66\x08\x5c\x43\x34\xcd\x11\xf0\x39\x43\xc6\x65\x4e\x7a\x9c\x3e\xde\x2d\x7e\x99\x56\xfa\x98\x69\xb1\x16\xbb\x98\x11\x2b\xdc\xf6\x72\xdd\xbf\x89\xc6\xf7\x31\x80\x76\x29\x7d\x45\x03\xdf\x4b\x43\xed\x17\x4b\xe4\x9d\x71\x78\x41\xcc\x8c\xab\x2b\x96\x04\x19\xa1\xf9\xeb\x1c\x4e\xe3\x41\xbd\x92\x9f\xe5\x77\x67\x5d\xbd\xa6\x39\x17\x05\xff\x11\x29\x64\x39\x7e\x45\x26\xca\xe9\xa9\x7e\xbd\xb3\x42\xd9\x65\xee\x39\xc6\xb0\xcf\x8a\x71\x01\x2b\xe8\x12\xd5\xb3\xa5\xbf\x89\x95\x34\x72\xc0\x6b\xdd\xd9\x21\xc7\x75\xbb\xbd\xec\x4a\x95\xc6\xeb\x6f\x3f\xaa\x8e\x9a\xf0\xa2\x03\xd2\xa6\x93\x1e\x57\xe5\xdf\x72\x9c\x77\x1c\x72\xcc\x72\xe4\xd2\xc2\x4f\x78\x34\x9f\x6b\xc8\xa6\x5e\xe6\x7a\x8e\x02\x06\x07\x84\x38\x95\xd1\x23\x3b\x7e\xd5\x7c\x59\x05\x7d\xa4\x4c\xe8\x8d\xcb\xea\xc0\xf7\x59\x96\xe6\x02\xa8\xb0\xcb\x21\x38\x2d\x6f\x61\x0e\x19\xe6\xaa\x5d\x97\xcb\xa3\x9c\x0a\x1a\x91\x04\xf4\x6e\x92\xf8\x5a\x8e\x43\xb9\x9e\x8a\x2b\xe7\xca\xcc\x54\x11\xda\x28\xa1\x52\x50\xc2\x62\x35\x22\x20\xd1\x16\x63\x79\x3f\xc7\xf3\x33\x30\xcd\x76\x44\x1a\xd6\x28\x46\xc9\xc4\x1a\xfd\xc6\xef\x7f\x74\x3a\x8e\xf8\x39\xfc\x4a\x92\xde\xa1\x76\xa3\x69\x70\x1c\x2d\x77\x44\x92\x44\x09\x5d\xbd\xcb\x14\x69\x51\x5d\x65\x0f\x26\x21\x55\x0d\x04\xdb\x7b\x48\xe5\x74\xd6\xa2\x31\x37\x69\xec\x68\x3c\xa0\xf3\xd7\x40\x86\x69\xdd\x8e\x39\x12\x9e\x32\x6e\x37\xb6\x8a\x52\x92\x20\x8f\x70\x90\x3c\x65\xa3\x2c\xe5\xed\x97\xce\xdd\x5c\xfd\x99\x3b\x3f\xfd\x74\x11\xea\x01\x6a\x78\x31\x04\x1c\x3d\xe1\xd1\xb6\xa5\x09\x5a\x63\xee\x6a\xf3\x91\x2c\xb7\x27\xb7\xa6\xf1\x40\x6d\x22\xf7\xd2\x7d\x97\xad\x5e\xb0\x95\x0b\xfa\xaa\xe2\x29\xe2\x6c\x03\x36\x0f\x9a\xba\xb7\x01\xfc\xef\xcc\xeb\xfd\x0c\x03\x92\x96\x54\xb2\xd9\x19\x24\x23\x1d\xd0\x4a\x2a\x15\xcd\xc9\xa8\x08\xe3\x42\x44\xeb\xd5\x67\x34\xbf\x39\x49\x9e\xb2\x9e\x23\xdb\x97\xba\xaf\xb0\x40\xae\x1c\x95\x95\xa3\xe5\x86\x66\xca\x69\xae\xa9\xe9\xd2\x7e\xc2\xee\xb6\x9e\xe3\xf9\x7c\xfc\x5b\x07\xc3\xa5\x2b\x0d\xd0\xa5\x11\x86\xf0\xce\x6e\xf9\xc8\x6a\x3a\x58\x27\x9a\x50\x7f\xea\xd0\xa7\x12\xc0\x65\x07\x17\xc6\x00\xe6\xe0\x1d\x79\x96\x67\xda\xa6\x1f\xd6\xa7\x37\x8d\x6f\xc3\x06\x4e\x78\xa3\x08\x4b\xe9\xd4\x42\x72\x1a\x3f\x4b\xc6\x56\xa8\xde\xca\x93\xe7\xd8\x90\x7e\x69\xcd\xab\xdc\x68\x4a\xa1\xf9\x68\x4a\x7d\x10\x86\x31\xac\x8e\x05\x13\xd2\x39\xc4\x72\x9c\xd6\x1b\xe5\x92\x7f\x54\xaf\x85\xf5\x70\xfa\xff\x51\x97\xd7\x7a\xdc\x9e\x4b\x59\xb5\x53\x64\xe2\x52\x42\x0d\xea\xdf\x88\x55\x69\x4b\x0b\x5c\xa5\xad\x16\xb5\xd1\x81\x94\xae\x3e\x63\x24\x06\x7a\x43\xb2\xd9\xe8\x48\xb0\x87\x50\xbf\x62\x42\xb4\xcd\x84\x5e\x6c\xda\xb8\x5d\x72\x08\xb3\xc4\xf3\x7d\x77\x7e\x26\x36\x4d\x30\xd2\x18\xde\x97\x4b\x6d\xe8\xb8\x6c\x71\xea\x33\x83\x9b\x54\xd5\x14\x95\x6b\x57\xb8\x96\x64\x50\x4d\x6b\xf5\xec\xb9\xf8\x74\xc3\x78\xaf\xd3\xba\xbc\xfd\x1d\x6a\x1b\xe8\x3d\x1f\xf0\x41\xf1\x11\x9f\x69\x61\x8d\x97\xa0\x46\x76\x3e\x78\x77\x9e\x1f\xf4\xbd\x39\x7d\xc3\xbb\x4c\x23\x4a\x29\xc1\xd0\xcc\x29\x3a\x2f\x30\xdb\x4f\x18\xcc\x16\x4f\xb5\xe7\x54\xcd\x57\x84\xff\x94\xd7\x82\x27\x1a\x37\x6d\x84\xaa\x6d\x33\x91\xf1\xbe\xe1\x81\x6f\x6e\x8f\xba\xf0\x68\x52\xde\xf2\x0b\x2f\xc5\xc0\xf5\x6c\x51\x03\xbb\xc5\x28\xb4\xc3\xab\xd8\x54\xbe\x9e\x04\x6e\xc3\xd7\x46\xd7\x5e\x92\xa2\xfe\x6d\x77\xdd\xf3\x56\xb3\x0c\xca\x5e\x54\xad\x8a\x84\x2e\x73\x7d\xed\xea\xd9\x00\x78\xa9\x3d\xd5\x02\x37\x0a\x98\x6d\x2b\x8e\xd0\x23\x81\xdd\xf4\xd0\xeb\xd2\xf5\xbf\x02\x00\x00\xff\xff\x3f\x16\xdb\xda\x6c\x2c\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/1_base_schema.down.sql"].(os.FileInfo),
		fs["/1_base_schema.up.sql"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
